import cv2
import numpy as np
import mediapipe as mp
from keras.models import model_from_json
from keras.models import load_model


emotion_dict = {0: 'Angry', 1: 'Disgust', 2: 'Fear', 3: 'Happy', 4: 'Neutral', 5: 'Sad', 6: 'Surprise'}
gesture_dict = {0: "Hello", 1: "Hold", 2: "Peace"}



emotion_model = load_model('C:/Users/91965/SSST/model/Emotion_detection_CNN/model.h5')
print("Loaded emotion model from disk")


json_file = open('C:/Users/91965/SSST/model/Gesture_data_collection&pre_processing/gesture_model.json', 'r')
loaded_model_json = json_file.read()
json_file.close()
gesture_model = model_from_json(loaded_model_json)
gesture_model.load_weights("C:/Users/91965/SSST/model/Gesture_data_collection&pre_processing/gesture_model.h5")
print("Loaded gesture model from disk")


mp_hands = mp.solutions.hands
hands = mp_hands.Hands(max_num_hands=2, min_detection_confidence=0.7, min_tracking_confidence=0.7)
mp_face_detection = mp.solutions.face_detection
face_detection = mp_face_detection.FaceDetection(min_detection_confidence=0.7)


cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    frame = cv2.resize(frame, (1280, 720))
    if not ret:
        break

    rgb_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
    gray_frame = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)

    
    face_results = face_detection.process(rgb_frame)

    
    if face_results.detections:
        for detection in face_results.detections:
            bboxC = detection.location_data.relative_bounding_box
            ih, iw, _ = frame.shape
            x, y, w, h = int(bboxC.xmin * iw), int(bboxC.ymin * ih), int(bboxC.width * iw), int(bboxC.height * ih)
            cv2.rectangle(frame, (x, y), (x + w, y + h), (0, 255, 0), 2)
            roi_gray_face = gray_frame[y:y + h, x:x + w]
            if roi_gray_face.size == 0:
                continue
            cropped_img_face = np.expand_dims(np.expand_dims(cv2.resize(roi_gray_face, (48, 48)), -1), 0)

            emotion_prediction = emotion_model.predict(cropped_img_face)
            maxindex_emotion = int(np.argmax(emotion_prediction))
            cv2.putText(frame, emotion_dict[maxindex_emotion], (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2, cv2.LINE_AA)

    
    result = hands.process(rgb_frame)

    if result.multi_hand_landmarks:
        for hand_landmarks in result.multi_hand_landmarks:
            
            h, w, c = frame.shape
            x_min, x_max = w, 0
            y_min, y_max = h, 0
            for lm in hand_landmarks.landmark:
                x, y = int(lm.x * w), int(lm.y * h)
                x_min = min(x_min, x)
                x_max = max(x_max, x)
                y_min = min(y_min, y)
                y_max = max(y_max, y)
            
            
            cv2.rectangle(frame, (x_min, y_min), (x_max, y_max), (255, 0, 0), 2)
            
            
            roi = frame[y_min:y_max, x_min:x_max]
            if roi.size == 0:
                continue
            roi_gray = cv2.cvtColor(roi, cv2.COLOR_BGR2GRAY)
            cropped_img_hand = np.expand_dims(np.expand_dims(cv2.resize(roi_gray, (48, 48)), -1), 0)
            
            
            gesture_prediction = gesture_model.predict(cropped_img_hand)
            maxindex_gesture = int(np.argmax(gesture_prediction))
            cv2.putText(frame, gesture_dict[maxindex_gesture], (x_min, y_min - 10), cv2.FONT_HERSHEY_SIMPLEX, 1, (255, 0, 0), 2, cv2.LINE_AA)

    
    cv2.imshow('Emotion and Gesture Detection', frame)
    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()
hands.close()
face_detection.close()
